generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
<<<<<<< HEAD
  id                    String         @id @default(cuid())
  createdAt             DateTime       @default(now())
  email                 String         @unique
  firstName             String?
  lastName              String?
  gender                String?
  profileImageUrl       String?
  stripeUserId          String?        @unique
  payments              Payment[]
  subscriptions         Subscription[]
  invoices              Invoice[]
  opportunities         Opportunity[]  @relation("CreatedBy")
  assignedOpportunities Opportunity[]  @relation("AssignedSA")
  notes                 Note[]
  clientPortals         ClientPortal[]
=======
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  email            String         @unique
  firstName        String?
  lastName         String?
  gender           String?
  profileImageUrl  String?
  stripeUserId     String?        @unique
  payments         Payment[]
  subscriptions    Subscription[]
  invoices         Invoice[]
  opportunities    Opportunity[]  @relation("CreatedBy")
  assignedOpportunities Opportunity[] @relation("AssignedSA")
  notes            Note[]
>>>>>>> 31066eb6d481c608ca59397cc5883e01ce9d4bc6
}

model Payment {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  stripeId        String   @unique
  amount          Float
  paymentTime     DateTime
  currency        String
  customerDetails String?
  paymentIntent   String
  userId          String
  user            User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id                     String           @id @default(cuid())
  createdAt              DateTime         @default(now())
  stripeSubscriptionId   String           @unique
  status                 String
  startDate              DateTime
  endDate                DateTime?
  defaultPaymentMethodId String?
  userId                 String
  user                   User             @relation(fields: [userId], references: [id])
  planId                 String
  plan                   SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices               Invoice[]
}

model SubscriptionPlan {
<<<<<<< HEAD
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  name          String
  description   String
  amount        Float
  currency      String
  interval      String
=======
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  name        String
  description String
  amount      Float
  currency    String
  interval    String
>>>>>>> 31066eb6d481c608ca59397cc5883e01ce9d4bc6
  subscriptions Subscription[]
}

model Invoice {
<<<<<<< HEAD
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now())
  stripeInvoiceId String       @unique
  amountPaid      Float
  amountDue       Float
  currency        String
  status          String
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  subscriptionId  String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}

model Opportunity {
  id                      String                 @id @default(cuid())
=======
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  stripeInvoiceId  String       @unique
  amountPaid       Float
  amountDue        Float
  currency         String
  status           String
  userId           String
  user             User         @relation(fields: [userId], references: [id])
  subscriptionId   String
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
}

model Opportunity {
  id                      String   @id @default(cuid())
>>>>>>> 31066eb6d481c608ca59397cc5883e01ce9d4bc6
  companyName             String
  contactName             String
  contactEmail            String
  value                   Float
  stage                   String
  priority                String
  lastUpdated             DateTime
<<<<<<< HEAD
  createdAt               DateTime               @default(now())
=======
  createdAt               DateTime @default(now())
>>>>>>> 31066eb6d481c608ca59397cc5883e01ce9d4bc6
  description             String?
  saRequestNotes          String?
  technologyStack         String[]
  integrationRequirements String[]
  complianceRequirements  String[]
  nextSteps               String?
  assignedSAId            String?
<<<<<<< HEAD
  assignedSA              User?                  @relation("AssignedSA", fields: [assignedSAId], references: [id])
  createdById             String
  createdBy               User                   @relation("CreatedBy", fields: [createdById], references: [id])
  notes                   Note[]                 @relation("OpportunityNotes")
  portalData              OpportunityPortalData?
  clientPortal            ClientPortal[]

  @@index([assignedSAId])
  @@index([createdById])
=======
  assignedSA              User?    @relation("AssignedSA", fields: [assignedSAId], references: [id])
  createdById             String
  createdBy               User     @relation("CreatedBy", fields: [createdById], references: [id])
  notes                   Json[]
>>>>>>> 31066eb6d481c608ca59397cc5883e01ce9d4bc6
}

model Note {
  id            String      @id @default(cuid())
  content       String
  createdAt     DateTime    @default(now())
  authorId      String
  opportunityId String
  author        User        @relation(fields: [authorId], references: [id])
<<<<<<< HEAD
  opportunity   Opportunity @relation("OpportunityNotes", fields: [opportunityId], references: [id])

  @@index([authorId])
  @@index([opportunityId])
}

model OpportunityPortalData {
  id                  String      @id @default(cuid())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  opportunityId       String      @unique
  opportunity         Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  integrationProgress Json?
  engagementStages    Json?
  isPublished         Boolean     @default(false)
  accessToken         String?     @unique
  lastAccessed        DateTime?

  @@index([opportunityId])
}

model ClientPortal {
  id            String      @id @default(cuid())
  accessToken   String      @unique
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])
  createdAt     DateTime    @default(now())
  lastAccessed  DateTime?
  isActive      Boolean     @default(true)
  expiresAt     DateTime?
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])

  @@index([opportunityId])
  @@index([createdById])
}
=======
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])

  @@index([authorId])
  @@index([opportunityId])
}
>>>>>>> 31066eb6d481c608ca59397cc5883e01ce9d4bc6
